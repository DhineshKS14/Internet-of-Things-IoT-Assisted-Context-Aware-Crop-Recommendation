from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, mean_squared_error
import pandas as pd
import numpy as np

# Sample input features
x_train = df.drop(["crop", "totalprice"], axis=1)

# Sample crop types (string labels)
crop_types = df["crop"]
# Sample cost factors (numeric labels)
cost_factors = df["totalprice"]

# Combine the crop types and cost factors for each sample
labels = list(zip(crop_types, cost_factors))
# Split the data into training and testing sets
x_train, x_test, labels_train, labels_test = train_test_split(x_train, labels, test_size=0.2, random_state=42)

# Assuming 'soiltype' is a categorical column in your DataFrame
categorical_features = ['soiltype']

# Separate numerical and categorical features
numerical_features = [col for col in x_train.columns if col not in categorical_features]

# Create a preprocessor to handle numerical and categorical features separately
preprocessor = ColumnTransformer(
    transformers=[
        ('num', SimpleImputer(strategy='mean'), numerical_features),
        ('cat', OneHotEncoder(), categorical_features)
    ])

# Train SVM classifier for crop types
clf_types = SVC(kernel='linear', C=1.0)
clf_types_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', clf_types)
])
# Extract only crop types from labels_train
labels_train_crop = [item[0] for item in labels_train]
# Convert the list of labels to a 1D array
labels_train_crop = np.array(labels_train_crop)
clf_types_pipeline.fit(x_train, labels_train_crop)

# Train SVM classifier for cost factors
clf_costs = SVC(kernel='linear', C=1.0)
clf_costs_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', clf_costs)
])
# Extract only cost factors from labels_train
labels_train_cost = [item[1] for item in labels_train]
# Use LabelEncoder to encode the labels
label_encoder = LabelEncoder()
labels_train_cost_encoded = label_encoder.fit_transform(labels_train_cost)
clf_costs_pipeline.fit(x_train, labels_train_cost_encoded)

# Make predictions on the test set
predicted_types = clf_types_pipeline.predict(x_test)
predicted_costs_encoded = clf_costs_pipeline.predict(x_test)

# Decode the predicted cost factors back to their original values
predicted_costs = label_encoder.inverse_transform(predicted_costs_encoded)

# Compute F1 score for crop type prediction
f1_types = f1_score([item[0] for item in labels_test], predicted_types, average='weighted')

# Evaluate the model for the cost factor prediction using mean squared error
mse_costs = mean_squared_error([item[1] for item in labels_test], predicted_costs)

print(f"F1 score for crop type prediction: {f1_types}")
print(f"Mean Squared Error for cost factor: {mse_costs}")

# Print classification report for crop type prediction
print("Classification Report for crop type prediction:")
print(classification_report([item[0] for item in labels_test], predicted_types))
accuracy = classification_report([item[0] for item in labels_test], predicted_types, output_dict=True)['accuracy']
print("Accuracy:", accuracy)
